diff --git a/CMakeLists.txt b/CMakeLists.txt
index 78740c2..1159bf1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 2.8.9)
 project(SCF)
 
-set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wextra -Wall")
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall -Wextra -Wpedantic")
 
 include_directories(include)
 
@@ -9,9 +9,10 @@ file (GLOB SOURCES "src/*.c")
 
 add_executable(scf ${SOURCES})
 
-set(EXTERNAL_LIBS m cblas lapack gsl)
+find_package(GSL)
+include_directories(${GSL_INCLUDE_DIRS})
 
-target_link_libraries(scf ${EXTERNAL_LIBS})
+target_link_libraries(scf m ${GSL_LIBRARIES})
 
 option(BUILD_DOC "Build documentation" ON)
 
diff --git a/src/THO.c b/src/THO.c
index b585e0b..01a4bd4 100644
--- a/src/THO.c
+++ b/src/THO.c
@@ -117,7 +117,7 @@ double A(int i, int r, int u, int l1, int l2, double PAx, double PBx, double CPx
 
 double* G_array(int l1, int l2, double PAx, double PBx, double CPx, double gamma){
   int l1l2 = l1 + l2;
-  double* out = malloc(sizeof (double) * l1l2+1);
+  double* out = malloc(sizeof (double) * (l1l2+1));
   if (l1l2 == 0){
     out[0] = 1.0;
   } else if (l1l2 == 1){
@@ -192,7 +192,7 @@ double* C_array(int l1, int l2, double PAx, double PBx, double gamma1, int l3, i
   double delta = ((1 / (4 * gamma1)) + (1 / (4 * gamma2)));
   double* H1 = H_array(l1, l2, PAx, PBx, gamma1);
   double* H2 = H_array(l3, l4, QCx, QDx, gamma2);
-  double* out = malloc(sizeof (double) * l1+l2+l3+l4+1);
+  double* out = malloc(sizeof (double) * (l1+l2+l3+l4+1));
   for (int L = 0; L <= l1 + l2; L++){
     for(int M = 0; M <= l3 + l4; M++){
       for(int u = 0; u <= floor((L+M)/2); u++){
diff --git a/src/basis.c b/src/basis.c
index b4dc055..0d29ee0 100644
--- a/src/basis.c
+++ b/src/basis.c
@@ -5,10 +5,9 @@
 #include <stdlib.h>
 
 void normalise(bfn* basis){
-  double l, m, n;
-  l = basis->shell[0];
-  m = basis->shell[1];
-  n = basis->shell[2];
+  const int l = basis->shell[0];
+  const int m = basis->shell[1];
+  const int n = basis->shell[2];
   for(int i = 0; i < 3; i++){
     double num = pow(2.0, 2.0*(l+m+n) + 3.0/2.0) * pow(basis->exps[i], (l+m+n) + 3.0/2.0);
     double denom = double_factorial(2*l-1) * double_factorial(2*m-1) * double_factorial(2*n-1) * pow(M_PI, 3.0/2.0);
@@ -18,23 +17,26 @@ void normalise(bfn* basis){
 
 bfn* bfn_create(int nprimitives, double* exps, double* coefs, double origin[3], int shell[3], double atomno){
   
-  bfn *ret_bfn = malloc(sizeof (bfn));
+  bfn *ret_bfn = malloc(sizeof (bfn) * 1);
   if (ret_bfn == NULL)
     return NULL;
 
   ret_bfn->nprimitives = nprimitives;
-  ret_bfn->exps = malloc(sizeof (double) * nprimitives);
-  if (ret_bfn->exps == NULL){
+  ret_bfn->coefs = malloc(sizeof (double) * nprimitives);
+  if (ret_bfn->coefs == NULL){
     free(ret_bfn);
     return NULL;
   }
-  ret_bfn->coefs = malloc(sizeof (double) * nprimitives);
-  if (ret_bfn->coefs == NULL){
+  ret_bfn->exps = malloc(sizeof (double) * nprimitives);
+  if (ret_bfn->exps == NULL){
+    free(ret_bfn->coefs);
     free(ret_bfn);
     return NULL;
   }
   ret_bfn->norm = malloc(sizeof (double) * nprimitives);
   if (ret_bfn->norm == NULL){
+    free(ret_bfn->coefs);
+    free(ret_bfn->exps);
     free(ret_bfn);
     return NULL;
   }
@@ -53,9 +55,9 @@ bfn* bfn_create(int nprimitives, double* exps, double* coefs, double origin[3],
 
 void bfn_destroy(bfn* in_bfn){
   if (in_bfn != NULL) {
-    free(in_bfn->coefs);
-    free(in_bfn->exps);
     free(in_bfn->norm);
-    //free(in_bfn);
+    free(in_bfn->exps);
+    free(in_bfn->coefs);
+    free(in_bfn);
   }
 }
diff --git a/src/main.c b/src/main.c
index 2100ed4..e1c439a 100644
--- a/src/main.c
+++ b/src/main.c
@@ -34,5 +34,7 @@ int main(int argc, char *argv[])
   //hyd->basisfunctions[3] = *H4;
   calculate_integral(hyd);
   system_destroy(hyd);
+  free(H1);
+  free(H2);
   return 0;
 }
diff --git a/src/system.c b/src/system.c
index 15a7f92..cc0f695 100644
--- a/src/system.c
+++ b/src/system.c
@@ -16,21 +16,31 @@ sys* system_create(int natoms, int nbfs){
   }
   ret_sys->S = malloc(sizeof (double) * nbfs*nbfs);
   if (ret_sys->S == NULL){
+    free(ret_sys->basisfunctions);
     free(ret_sys);
     return NULL;
   }
   ret_sys->T = malloc(sizeof (double) *  nbfs*nbfs);
   if (ret_sys->T == NULL){
+    free(ret_sys->basisfunctions);
+    free(ret_sys->S);
     free(ret_sys);
     return NULL;
   }
   ret_sys->V = malloc(sizeof (double) *  nbfs*nbfs);
   if (ret_sys->V == NULL){
+    free(ret_sys->basisfunctions);
+    free(ret_sys->S);
+    free(ret_sys->T);
     free(ret_sys);
     return NULL;
   }
   ret_sys->ERI = malloc(sizeof (double) *  nbfs*nbfs*nbfs*nbfs);
   if (ret_sys->ERI == NULL){
+    free(ret_sys->basisfunctions);
+    free(ret_sys->S);
+    free(ret_sys->T);
+    free(ret_sys->V);
     free(ret_sys);
     return NULL;
   }
diff --git a/src/utils.c b/src/utils.c
index 0254e7e..f5c2857 100644
--- a/src/utils.c
+++ b/src/utils.c
@@ -61,7 +61,7 @@ double distd(double* vec1, double* vec2){
 void print_matrix(double* mat, int M, int K){
   for(int i = 0; i < M; i++){
     for(int j = 0; j < K; j++){
-      printf("% .4f ", mat[i * K + j]);
+      printf("%.4lf ", mat[(i * K) + j]);
     }
     printf("\n");
   }
@@ -71,7 +71,7 @@ void print_matrix(double* mat, int M, int K){
 void print_matrixi(int* mat, int M, int K){
   for(int i = 0; i < M; i++){
     for(int j = 0; j < K; j++){
-      printf("%d ", mat[i * K + j]);
+      printf("%d ", mat[(i * K) + j]);
     }
     printf("\n");
   }
